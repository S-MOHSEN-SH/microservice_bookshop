version: '3.8'

services:
  db1:
    image: mongo:3.7
    container_name: User_DB
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports:
      - ${MONGO_PORT}:27017
    volumes:
      - mongo-data:/data/db
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 3

  db2:
    image: postgres:13
    container_name: Books_DB
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  cache:
    image: redis:latest
    container_name: redis_caching
    restart: always
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - redis-data:/data
    environment:
      REDIS_USER: ${REDIS_USER}
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672" # for UI managment on localhost 
    networks:
      - backend
  
volumes:
  mongo-data:
  postgres-data:
  redis-data:

networks:
  backend:
    driver: bridge


