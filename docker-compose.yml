version: '3.8'

services:
  db1:
    image: mongo:3.7
    container_name: user_db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "mongo", "--eval", "db.runCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 3

  db2:
    image: postgres:13
    container_name: books_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  cache:
    image: redis:latest
    container_name: redis_caching
    restart: always
    env_file:
      - ./.env
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672" # for UI management on localhost 
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  user:
    build:
      context: ./user
      dockerfile: Dockerfile
    image: user_microservice:latest
    container_name: user
    environment:
      MONGO_URI: ${MONGO_URI}
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    networks:
      - backend
    depends_on:
      - db1

  gateway:
    build: 
      context: ./gateway
      dockerfile: Dockerfile
    env_file:
      - ./.env
    image: gateway_microservice:latest
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
    networks:
      - backend

  book_microservice:
    build:
      context: ./book_microservice
      dockerfile: Dockerfile
    image: book_microservice:latest
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5002:5002"
    networks:
      - backend
    depends_on:
      - db2

  mailer:
    build:
      context: ./mailer
      dockerfile: Dockerfile
    image: mailer_microservice:latest
    env_file:
      - .env
    networks:
      - backend
    depends_on:
      - rabbitmq

volumes:
  mongo-data:
  postgres-data:
  redis-data:

networks:
  backend:
    driver: bridge
